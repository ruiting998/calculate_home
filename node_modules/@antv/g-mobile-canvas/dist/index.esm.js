import { __awaiter, __generator, __extends } from 'tslib';
import { AbstractRendererPlugin, AbstractRenderer } from '@antv/g-lite';
import * as CanvasPathGenerator from '@antv/g-plugin-canvas-path-generator';
import * as CanvasPicker from '@antv/g-plugin-canvas-picker';
export { CanvasPicker };
import * as CanvasRenderer from '@antv/g-plugin-canvas-renderer';
export { CanvasRenderer };
import * as DragDropEvent from '@antv/g-plugin-dragndrop';
import * as ImageLoader from '@antv/g-plugin-image-loader';
import * as MobileInteraction from '@antv/g-plugin-mobile-interaction';
import { isNil } from '@antv/util';

function isCanvasElement(el) {
    if (!el || typeof el !== 'object')
        return false;
    if (el.nodeType === 1 && el.nodeName) {
        // HTMLCanvasElement
        return true;
    }
    // CanvasElement
    return !!el.isCanvasElement;
}

var Canvas2DContextService = /** @class */ (function () {
    function Canvas2DContextService(context) {
        this.canvasConfig = context.config;
    }
    Canvas2DContextService.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, canvas, devicePixelRatio, dpr;
            return __generator(this, function (_b) {
                _a = this.canvasConfig, canvas = _a.canvas, devicePixelRatio = _a.devicePixelRatio;
                this.$canvas = canvas;
                // 实际获取到小程序环境的上下文
                this.context = this.$canvas.getContext('2d');
                dpr = devicePixelRatio || 1;
                dpr = dpr >= 1 ? Math.ceil(dpr) : 1;
                this.dpr = dpr;
                this.resize(this.canvasConfig.width, this.canvasConfig.height);
                return [2 /*return*/];
            });
        });
    };
    Canvas2DContextService.prototype.getContext = function () {
        return this.context;
    };
    Canvas2DContextService.prototype.getDomElement = function () {
        return this.$canvas;
    };
    Canvas2DContextService.prototype.getDPR = function () {
        return this.dpr;
    };
    Canvas2DContextService.prototype.getBoundingClientRect = function () {
        if (this.$canvas.getBoundingClientRect) {
            return this.$canvas.getBoundingClientRect();
        }
    };
    Canvas2DContextService.prototype.destroy = function () {
        // TODO: 小程序环境销毁 context
        this.context = null;
        this.$canvas = null;
    };
    Canvas2DContextService.prototype.resize = function (width, height) {
        var devicePixelRatio = this.canvasConfig.devicePixelRatio;
        var pixelRatio = devicePixelRatio;
        var canvasDOM = this.$canvas; // HTMLCanvasElement or canvasElement
        // 浏览器环境设置style样式
        if (canvasDOM.style) {
            canvasDOM.style.width = width + 'px';
            canvasDOM.style.height = height + 'px';
        }
        if (isCanvasElement(canvasDOM)) {
            canvasDOM.width = width * pixelRatio;
            canvasDOM.height = height * pixelRatio;
            if (pixelRatio !== 1) {
                this.context.scale(pixelRatio, pixelRatio);
            }
        }
    };
    Canvas2DContextService.prototype.applyCursorStyle = function (cursor) {
        // 小程序环境无需设置鼠标样式
    };
    Canvas2DContextService.prototype.toDataURL = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var type, encoderOptions;
            return __generator(this, function (_a) {
                type = options.type, encoderOptions = options.encoderOptions;
                return [2 /*return*/, this.context.canvas.toDataURL(type, encoderOptions)];
            });
        });
    };
    return Canvas2DContextService;
}());

var ContextRegisterPlugin = /** @class */ (function (_super) {
    __extends(ContextRegisterPlugin, _super);
    function ContextRegisterPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'mobile-canvas-context-register';
        return _this;
    }
    ContextRegisterPlugin.prototype.init = function () {
        this.context.ContextService = Canvas2DContextService;
    };
    ContextRegisterPlugin.prototype.destroy = function () {
        delete this.context.ContextService;
    };
    return ContextRegisterPlugin;
}(AbstractRendererPlugin));

var Renderer = /** @class */ (function (_super) {
    __extends(Renderer, _super);
    function Renderer(config) {
        var _this = _super.call(this, config) || this;
        // register Canvas2DContext
        _this.registerPlugin(new ContextRegisterPlugin());
        _this.registerPlugin(new ImageLoader.Plugin());
        _this.registerPlugin(new CanvasPathGenerator.Plugin());
        // enable rendering with Canvas2D API
        _this.registerPlugin(new CanvasRenderer.Plugin());
        _this.registerPlugin(new MobileInteraction.Plugin());
        // enable picking with Canvas2D API
        _this.registerPlugin(new CanvasPicker.Plugin());
        _this.registerPlugin(new DragDropEvent.Plugin({
            isDocumentDraggable: isNil(config === null || config === void 0 ? void 0 : config.isDocumentDraggable) ? true : config.isDocumentDraggable,
            isDocumentDroppable: isNil(config === null || config === void 0 ? void 0 : config.isDocumentDroppable) ? true : config.isDocumentDroppable,
            dragstartDistanceThreshold: isNil(config === null || config === void 0 ? void 0 : config.dragstartDistanceThreshold)
                ? 10
                : config.dragstartDistanceThreshold,
            dragstartTimeThreshold: isNil(config === null || config === void 0 ? void 0 : config.dragstartTimeThreshold)
                ? 50
                : config.dragstartTimeThreshold,
        }));
        return _this;
    }
    return Renderer;
}(AbstractRenderer));

export { Renderer };
//# sourceMappingURL=index.esm.js.map
