import { __awaiter, __generator, __extends } from 'tslib';
import { AbstractRendererPlugin, AbstractRenderer } from '@antv/g-lite';
import * as DragDropEvent from '@antv/g-plugin-dragndrop';
import * as MobileInteraction from '@antv/g-plugin-mobile-interaction';
export { MobileInteraction };
import * as SVGPicker from '@antv/g-plugin-svg-picker';
export { SVGPicker };
import * as SVGRenderer from '@antv/g-plugin-svg-renderer';
import { createSVGElement } from '@antv/g-plugin-svg-renderer';
export { SVGRenderer };
import { isString, isNil } from '@antv/util';

var SVGContextService = /** @class */ (function () {
    function SVGContextService(context) {
        this.canvasConfig = context.config;
    }
    SVGContextService.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, container, doc, $namespace, dpr;
            return __generator(this, function (_b) {
                _a = this.canvasConfig, container = _a.container, doc = _a.document;
                // create container
                this.$container = isString(container) ? (doc || document).getElementById(container) : container;
                if (this.$container) {
                    if (!this.$container.style.position) {
                        this.$container.style.position = 'relative';
                    }
                    $namespace = createSVGElement('svg', doc);
                    $namespace.setAttribute('width', "".concat(this.canvasConfig.width));
                    $namespace.setAttribute('height', "".concat(this.canvasConfig.height));
                    this.$container.appendChild($namespace);
                    this.$namespace = $namespace;
                }
                dpr = window.devicePixelRatio || 1;
                dpr = dpr >= 1 ? Math.ceil(dpr) : 1;
                this.dpr = dpr;
                return [2 /*return*/];
            });
        });
    };
    // @ts-ignore
    SVGContextService.prototype.getDomElement = function () {
        return this.$namespace;
    };
    SVGContextService.prototype.getContext = function () {
        return this.$namespace;
    };
    SVGContextService.prototype.getDPR = function () {
        return this.dpr;
    };
    SVGContextService.prototype.getBoundingClientRect = function () {
        var _a;
        return (_a = this.$namespace) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
    };
    SVGContextService.prototype.destroy = function () {
        // destroy context
        if (this.$container && this.$namespace && this.$namespace.parentNode) {
            this.$container.removeChild(this.$namespace);
        }
    };
    SVGContextService.prototype.resize = function (width, height) {
        if (this.$namespace) {
            this.$namespace.setAttribute('width', "".concat(width));
            this.$namespace.setAttribute('height', "".concat(height));
        }
    };
    SVGContextService.prototype.applyCursorStyle = function (cursor) {
        if (this.$container) {
            this.$container.style.cursor = cursor;
        }
    };
    SVGContextService.prototype.toDataURL = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var cloneNode, svgDocType, svgDoc;
            return __generator(this, function (_a) {
                cloneNode = this.$namespace.cloneNode(true);
                svgDocType = document.implementation.createDocumentType('svg', '-//W3C//DTD SVG 1.1//EN', 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd');
                svgDoc = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg', svgDocType);
                svgDoc.replaceChild(cloneNode, svgDoc.documentElement);
                return [2 /*return*/, "data:image/svg+xml;charset=utf8,".concat(encodeURIComponent(new XMLSerializer().serializeToString(svgDoc)))];
            });
        });
    };
    return SVGContextService;
}());

var ContextRegisterPlugin = /** @class */ (function (_super) {
    __extends(ContextRegisterPlugin, _super);
    function ContextRegisterPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'mobile-svg-context-register';
        return _this;
    }
    ContextRegisterPlugin.prototype.init = function () {
        // @ts-ignore
        this.context.ContextService = SVGContextService;
    };
    ContextRegisterPlugin.prototype.destroy = function () {
        delete this.context.ContextService;
    };
    return ContextRegisterPlugin;
}(AbstractRendererPlugin));

var Renderer = /** @class */ (function (_super) {
    __extends(Renderer, _super);
    function Renderer(config) {
        var _this = _super.call(this, config) || this;
        _this.registerPlugin(new ContextRegisterPlugin());
        _this.registerPlugin(new SVGRenderer.Plugin());
        _this.registerPlugin(new MobileInteraction.Plugin());
        _this.registerPlugin(new SVGPicker.Plugin());
        _this.registerPlugin(new DragDropEvent.Plugin({
            isDocumentDraggable: isNil(config === null || config === void 0 ? void 0 : config.isDocumentDraggable) ? true : config.isDocumentDraggable,
            isDocumentDroppable: isNil(config === null || config === void 0 ? void 0 : config.isDocumentDroppable) ? true : config.isDocumentDroppable,
            dragstartDistanceThreshold: isNil(config === null || config === void 0 ? void 0 : config.dragstartDistanceThreshold)
                ? 10
                : config.dragstartDistanceThreshold,
            dragstartTimeThreshold: isNil(config === null || config === void 0 ? void 0 : config.dragstartTimeThreshold)
                ? 50
                : config.dragstartTimeThreshold,
        }));
        return _this;
    }
    return Renderer;
}(AbstractRenderer));

export { Renderer };
//# sourceMappingURL=index.esm.js.map
