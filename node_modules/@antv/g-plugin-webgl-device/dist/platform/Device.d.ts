import { Bindings, BindingsDescriptor, Buffer, BufferDescriptor, ComputePass, ComputePipeline, ComputePipelineDescriptor, DebugGroup, Device, DeviceLimits, IndexBufferDescriptor, InputLayout, InputLayoutDescriptor, InputState, PlatformFramebuffer, Program, ProgramDescriptor, ProgramDescriptorSimple, QueryPool, QueryPoolType, Readback, RenderPass, RenderPassDescriptor, RenderPipeline, RenderPipelineDescriptor, RenderTarget, RenderTargetDescriptor, Resource, Sampler, SamplerDescriptor, SwapChain, Texture, TextureDescriptor, VendorInfo, VertexBufferDescriptor } from '@antv/g-plugin-device-renderer';
import { ClipSpaceNearZ, Format, ViewportOrigin } from '@antv/g-plugin-device-renderer';
import type { EXT_texture_compression_rgtc, EXT_texture_norm16, GPlatformWebGL2Config, KHR_parallel_shader_compile, OES_draw_buffers_indexed } from './interfaces';
import { Program_GL } from './Program';
import { ResourceCreationTracker } from './ResourceCreationTracker';
export declare class Device_GL implements SwapChain, Device {
    private shaderDebug;
    private contextAttributes;
    OES_vertex_array_object: OES_vertex_array_object | null;
    ANGLE_instanced_arrays: ANGLE_instanced_arrays | null;
    OES_texture_float: OES_texture_float | null;
    OES_draw_buffers_indexed: OES_draw_buffers_indexed | null;
    WEBGL_depth_texture: WEBGL_depth_texture | null;
    WEBGL_compressed_texture_s3tc: WEBGL_compressed_texture_s3tc | null;
    WEBGL_compressed_texture_s3tc_srgb: WEBGL_compressed_texture_s3tc_srgb | null;
    EXT_texture_compression_rgtc: EXT_texture_compression_rgtc | null;
    EXT_texture_filter_anisotropic: EXT_texture_filter_anisotropic | null;
    KHR_parallel_shader_compile: KHR_parallel_shader_compile | null;
    EXT_texture_norm16: EXT_texture_norm16 | null;
    OES_texture_float_linear: OES_texture_float_linear | null;
    OES_texture_half_float_linear: OES_texture_half_float_linear | null;
    private scTexture;
    private scPlatformFramebuffer;
    private currentActiveTexture;
    currentBoundVAO: WebGLVertexArrayObject | null;
    private currentProgram;
    resourceCreationTracker: ResourceCreationTracker | null;
    private resourceUniqueId;
    private currentColorAttachments;
    private currentColorAttachmentLevels;
    private currentColorResolveTos;
    private currentColorResolveToLevels;
    private currentDepthStencilAttachment;
    private currentDepthStencilResolveTo;
    private currentSampleCount;
    private currentPipeline;
    private currentInputState;
    private currentMegaState;
    private currentSamplers;
    currentTextures: (WebGLTexture | null)[];
    private currentUniformBuffers;
    private currentUniformBufferByteOffsets;
    private currentUniformBufferByteSizes;
    private currentScissorEnabled;
    private currentStencilRef;
    private currentRenderPassDescriptor;
    private debugGroupStack;
    private resolveColorAttachmentsChanged;
    private resolveColorReadFramebuffer;
    private resolveColorDrawFramebuffer;
    private resolveDepthStencilAttachmentsChanged;
    private resolveDepthStencilReadFramebuffer;
    private resolveDepthStencilDrawFramebuffer;
    /**
     * use DRAW_FRAMEBUFFER in WebGL2
     */
    private renderPassDrawFramebuffer;
    readbackFramebuffer: WebGLFramebuffer;
    private fallbackTexture2D;
    private fallbackTexture2DDepth;
    private fallbackTexture2DArray;
    private fallbackTexture3D;
    private fallbackTextureCube;
    readonly platformString: string;
    readonly glslVersion: string;
    readonly explicitBindingLocations = false;
    readonly separateSamplerTextures = false;
    readonly viewportOrigin = ViewportOrigin.LowerLeft;
    readonly clipSpaceNearZ = ClipSpaceNearZ.NegativeOne;
    readonly supportMRT: boolean;
    private inBlitRenderPass;
    private blitRenderPipeline;
    private blitInputState;
    private blitBindings;
    /**
     * @see https://github.com/shrekshao/MoveWebGL1EngineToWebGL2/blob/master/Move-a-WebGL-1-Engine-To-WebGL-2-Blog-2.md#uniform-buffer
     */
    uniformBufferMaxPageByteSize: number;
    uniformBufferWordAlignment: number;
    uniformBufferMaxPageWordSize: number;
    supportedSampleCounts: number[];
    maxVertexAttribs: number;
    occlusionQueriesRecommended: boolean;
    gl: WebGLRenderingContext | WebGL2RenderingContext;
    constructor(gl: WebGLRenderingContext | WebGL2RenderingContext, configuration: GPlatformWebGL2Config);
    private createFallbackTexture;
    private getNextUniqueId;
    private checkLimits;
    configureSwapChain(width: number, height: number, platformFramebuffer?: PlatformFramebuffer): void;
    getDevice(): Device;
    getCanvas(): HTMLCanvasElement | OffscreenCanvas;
    getOnscreenTexture(): Texture;
    beginFrame(): void;
    endFrame(): void;
    translateTextureInternalFormat(fmt: Format): GLenum;
    translateTextureType(fmt: Format): GLenum;
    translateTextureFormat(fmt: Format): GLenum;
    setActiveTexture(texture: GLenum): void;
    private bindVAO;
    private programCompiled;
    private useProgram;
    ensureResourceExists<T>(resource: T | null): T;
    createBuffer(descriptor: BufferDescriptor): Buffer;
    createTexture(descriptor: TextureDescriptor): Texture;
    createSampler(descriptor: SamplerDescriptor): Sampler;
    createRenderTarget(descriptor: RenderTargetDescriptor): RenderTarget;
    createRenderTargetFromTexture(texture: Texture): RenderTarget;
    createProgram(descriptor: ProgramDescriptor): Program_GL;
    createProgramSimple(descriptor: ProgramDescriptor): Program_GL;
    createBindings(descriptor: BindingsDescriptor): Bindings;
    createInputLayout(descriptor: InputLayoutDescriptor): InputLayout;
    createInputState(_inputLayout: InputLayout, vertexBuffers: (VertexBufferDescriptor | null)[], indexBufferBinding: IndexBufferDescriptor | null, program: Program): InputState;
    createRenderPipeline(descriptor: RenderPipelineDescriptor): RenderPipeline;
    createComputePass(): ComputePass;
    createComputePipeline(descriptor: ComputePipelineDescriptor): ComputePipeline;
    createReadback(): Readback;
    createQueryPool(type: QueryPoolType, elemCount: number): QueryPool;
    createRenderPass(descriptor: RenderPassDescriptor): RenderPass;
    submitPass(pass: RenderPass): void;
    copySubTexture2D(dst_: Texture, dstX: number, dstY: number, src_: Texture, srcX: number, srcY: number): void;
    queryLimits(): DeviceLimits;
    queryTextureFormatSupported(format: Format, width: number, height: number): boolean;
    private queryProgramReady;
    queryPlatformAvailable(): boolean;
    queryVendorInfo(): VendorInfo;
    queryRenderPass(o: RenderPass): Readonly<RenderPassDescriptor>;
    queryRenderTarget(o: RenderTarget): Readonly<RenderTargetDescriptor>;
    setResourceName(o: Resource, name: string): void;
    setResourceLeakCheck(o: Resource, v: boolean): void;
    checkForLeaks(): void;
    pushDebugGroup(debugGroup: DebugGroup): void;
    popDebugGroup(): void;
    programPatched(o: Program, descriptor: ProgramDescriptorSimple): void;
    getBufferData(buffer: Buffer, dstBuffer: ArrayBufferView, wordOffset?: number): void;
    private debugGroupStatisticsDrawCall;
    debugGroupStatisticsBufferUpload(count?: number): void;
    private debugGroupStatisticsTextureBind;
    private debugGroupStatisticsTriangles;
    private reportShaderError;
    private checkProgramCompilationForErrors;
    private bindFramebufferAttachment;
    private bindFramebufferDepthStencilAttachment;
    private validateCurrentAttachments;
    private setRenderPassParametersBegin;
    private setRenderPassParametersColor;
    private setRenderPassParametersDepthStencil;
    private setRenderPassParametersClearColor;
    private setRenderPassParametersClearDepthStencil;
    setBindings(bindingLayoutIndex: number, bindings_: Bindings, dynamicByteOffsets: number[]): void;
    setViewport(x: number, y: number, w: number, h: number): void;
    setScissor(x: number, y: number, w: number, h: number): void;
    private applyAttachmentStateIndexed;
    private applyAttachmentState;
    private setMegaState;
    private validatePipelineFormats;
    setPipeline(o: RenderPipeline): void;
    setInputState(inputState_: InputState | null): void;
    setStencilRef(value: number): void;
    draw(count: number, firstVertex: number): void;
    drawIndexed(count: number, firstIndex: number): void;
    drawIndexedInstanced(count: number, firstIndex: number, instanceCount: number): void;
    beginOcclusionQuery(dstOffs: number): void;
    endOcclusionQuery(dstOffs: number): void;
    beginDebugGroup(name: string): void;
    endDebugGroup(): void;
    pipelineQueryReady(o: RenderPipeline): boolean;
    pipelineForceReady(o: RenderPipeline): void;
    private endPass;
    private setScissorEnabled;
    private applyStencil;
    private getFallbackTexture;
    private submitBlitRenderPass;
}
