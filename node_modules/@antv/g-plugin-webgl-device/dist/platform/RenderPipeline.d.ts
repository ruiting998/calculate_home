import type { Format, MegaStateDescriptor, RenderPipeline, RenderPipelineDescriptor } from '@antv/g-plugin-device-renderer';
import { ResourceType } from '@antv/g-plugin-device-renderer';
import type { Device_GL } from './Device';
import type { InputLayout_GL } from './InputLayout';
import type { BindingLayoutSamplerDescriptor_GL } from './interfaces';
import type { Program_GL } from './Program';
import { ResourceBase_GL } from './ResourceBase';
export interface BindingLayoutTable_GL {
    firstUniformBuffer: number;
    numUniformBuffers: number;
    firstSampler: number;
    numSamplers: number;
    samplerEntries: BindingLayoutSamplerDescriptor_GL[];
}
export interface BindingLayouts_GL {
    numSamplers: number;
    numUniformBuffers: number;
    bindingLayoutTables: BindingLayoutTable_GL[];
}
export declare class RenderPipeline_GL extends ResourceBase_GL implements RenderPipeline {
    type: ResourceType.RenderPipeline;
    bindingLayouts: BindingLayouts_GL;
    program: Program_GL;
    drawMode: GLenum;
    megaState: MegaStateDescriptor;
    inputLayout: InputLayout_GL | null;
    colorAttachmentFormats: (Format | null)[];
    depthStencilAttachmentFormat: Format | null;
    sampleCount: number;
    constructor({ id, device, descriptor, }: {
        id: number;
        device: Device_GL;
        descriptor: RenderPipelineDescriptor;
    });
    private createBindingLayouts;
}
