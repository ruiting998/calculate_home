"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SmoothPolyline = void 0;
var _tslib = require("tslib");
var _gLite = require("@antv/g-lite");
var Smooth = _interopRequireWildcard(require("./util/smooth"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var SmoothPolyline = /** @class */function (_super) {
  (0, _tslib.__extends)(SmoothPolyline, _super);
  function SmoothPolyline(config) {
    var _this = _super.call(this, config) || this;
    _this.updatePath();
    return _this;
  }
  SmoothPolyline.prototype.setAttribute = function (name, value, force) {
    _super.prototype.setAttribute.call(this, name, value, force);
    if (['smooth', 'points'].indexOf(name) > -1) {
      this.updatePath();
    }
  };
  SmoothPolyline.prototype.updatePath = function () {
    var _a = this.parsedStyle,
      smooth = _a.smooth,
      points = _a.points;
    var pos = points.points;
    var d = [['M', pos[0][0], pos[0][1]]];
    if (smooth) {
      var constaint = [[0, 0], [1, 1]];
      var sps = Smooth.smooth(pos.map(function (d) {
        return {
          x: d[0],
          y: d[1]
        };
      }), false, constaint);
      for (var i = 0, n = sps.length; i < n; i++) {
        var sp = sps[i];
        d.push(['C', sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]]);
      }
    } else {
      var i = void 0;
      var l = void 0;
      for (i = 1, l = pos.length - 1; i < l; i++) {
        d.push(['L', pos[i][0], pos[i][1]]);
      }
      d.push(['L', pos[l][0], pos[l][1]]);
    }
    _super.prototype.setAttribute.call(this, 'path', d);
  };
  SmoothPolyline.tag = 'smooth-polyline';
  return SmoothPolyline;
}(_gLite.Path);
exports.SmoothPolyline = SmoothPolyline;