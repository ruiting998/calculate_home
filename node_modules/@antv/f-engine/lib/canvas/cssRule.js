"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = checkCSSRule;
var _tslib = require("tslib");
var _util = require("@antv/util");
var elementStyle = {
  fillStyle: 'String',
  font: 'String',
  globalAlpha: 'Number',
  lineCap: 'String',
  lineWidth: ['Number', 'String'],
  lineJoin: 'String',
  miterLimit: 'Number',
  shadowBlur: 'Number',
  shadowColor: 'String',
  shadowOffsetX: 'Number',
  shadowOffsetY: 'Number',
  strokeStyle: 'String',
  textAlign: 'String',
  textBaseline: 'String',
  lineDash: ['Array', 'Number'],
  shadow: 'String',
  matrix: 'Array',
  stroke: 'String',
  fill: ['String', 'Object'],
  opacity: 'Number',
  fillOpacity: 'Number',
  strokeOpacity: 'Number'
};
// css规则表 TODO：补充 / 多种类型
var DEFAULT_CSS_RULE = {
  group: (0, _tslib.__assign)({}, elementStyle),
  text: (0, _tslib.__assign)((0, _tslib.__assign)({}, elementStyle), {
    x: 'Number',
    y: 'Number',
    text: 'String',
    width: 'Number',
    height: 'Number',
    fontSize: ['Number', 'String'],
    fontFamily: 'String',
    fontStyle: 'String',
    fontWeight: ['Number', 'String'],
    fontVariant: 'String'
  }),
  circle: (0, _tslib.__assign)((0, _tslib.__assign)({}, elementStyle), {
    cx: 'Number',
    cy: 'Number',
    r: 'Number'
  }),
  path: (0, _tslib.__assign)({}, elementStyle),
  ellipse: (0, _tslib.__assign)((0, _tslib.__assign)({}, elementStyle), {
    cy: 'Number',
    cx: 'Number',
    ry: 'Number',
    rx: 'Number'
  }),
  rect: (0, _tslib.__assign)((0, _tslib.__assign)({}, elementStyle), {
    width: 'Number',
    height: 'Number',
    x: 'Number',
    y: 'Number',
    radius: ['Array', 'Number']
  }),
  image: (0, _tslib.__assign)((0, _tslib.__assign)({}, elementStyle), {
    width: 'Number',
    height: 'Number',
    x: 'Number',
    y: 'Number',
    img: 'String',
    src: 'String'
  }),
  line: (0, _tslib.__assign)((0, _tslib.__assign)({}, elementStyle), {
    x1: 'Number',
    x2: 'Number',
    y1: 'Number',
    y2: 'Number'
  }),
  polyline: (0, _tslib.__assign)((0, _tslib.__assign)({}, elementStyle), {
    points: 'Array',
    smooth: 'Boolean'
  }),
  polygon: (0, _tslib.__assign)((0, _tslib.__assign)({}, elementStyle), {
    points: 'Array'
  }),
  arc: (0, _tslib.__assign)((0, _tslib.__assign)({}, elementStyle), {
    x: 'Number',
    y: 'Number',
    r: 'Number',
    startAngle: ['Number', 'String'],
    endAngle: ['Number', 'String'],
    anticlockwise: 'Boolean'
  }),
  marker: (0, _tslib.__assign)((0, _tslib.__assign)({}, elementStyle), {
    x: 'Number',
    y: 'Number',
    radius: 'Number',
    symbol: 'String'
  }),
  sector: (0, _tslib.__assign)((0, _tslib.__assign)({}, elementStyle), {
    x: 'Number',
    y: 'Number',
    startAngle: ['Number', 'String'],
    endAngle: ['Number', 'String'],
    r: 'Number',
    r0: 'Number',
    anticlockwise: 'Boolean'
  })
};
function checkCSSRule(type, style) {
  if (!style) {
    return style;
  }
  var cssStyle = {};
  Object.keys(style).forEach(function (key) {
    var value = style[key];
    if ((0, _util.isNil)(value)) {
      return;
    }
    var rule = DEFAULT_CSS_RULE[type] && DEFAULT_CSS_RULE[type][key];
    if (!rule) {
      cssStyle[key] = value;
      return;
    }
    var valueType = Object.prototype.toString.call(value);
    if ((0, _util.isArray)(rule)) {
      for (var i = 0, len = rule.length; i < len; i++) {
        if (valueType === "[object ".concat(rule[i], "]")) {
          cssStyle[key] = value;
          return;
        }
      }
      // 没有匹配的类型
      return;
    }
    // string
    if (valueType === "[object ".concat(rule, "]")) {
      cssStyle[key] = value;
    }
  });
  return cssStyle;
}