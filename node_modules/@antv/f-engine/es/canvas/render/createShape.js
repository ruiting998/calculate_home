import { Text, Circle, Ellipse, Rect, Path, Image, Line, Polygon, CSS, PropertySyntax } from '@antv/g-lite';
import { Arc, Marker, Sector, SmoothPolyline } from '../../shape';
import Gesture from '../../gesture';
import { getTag, registerTag } from '../../jsx/tag';
var EVENT_LIST = [['click', 'onClick'], ['touchstart', 'onTouchStart'], ['touchmove', 'onTouchMove'], ['touchend', 'onTouchEnd'], ['touchendoutside', 'onTouchEndOutside'],
// drage 相关
['dragenter', 'onDragEnter'], ['dragleave', 'onDragLeave'], ['dragover', 'onDragOver'], ['drop', 'onDrop'], ['dragstart', 'onDragStart'], ['drag', 'onDrag'], ['dragend', 'onDragEnd'],
// pan
['panstart', 'onPanStart'], ['pan', 'onPan'], ['panend', 'onPanEnd'],
// press
['pressstart', 'onPressStart'], ['press', 'onPress'], ['pressend', 'onPressEnd'],
// swipe
['swipe', 'onSwipe'],
// pinch
['pinchstart', 'onPinchStart'], ['pinch', 'onPinch'], ['pinchend', 'onPinchEnd']];
// 默认标签
var TagElements = [['group', Rect], ['text', Text], ['circle', Circle], ['path', Path], ['ellipse', Ellipse], ['rect', Rect], ['image', Image], ['line', Line], ['polyline', SmoothPolyline], ['polygon', Polygon], ['arc', Arc], ['marker', Marker], ['sector', Sector]];
TagElements.map(function (_a) {
  var type = _a[0],
    ShapeClass = _a[1];
  registerTag(type, ShapeClass);
});
// 注册 css 属性，不能注册已有属性，比如 r width等
var SECTOR_CSS_PROPERTY = [{
  name: 'r0',
  inherits: false,
  interpolable: true,
  syntax: PropertySyntax.LENGTH_PERCENTAGE
}, {
  name: 'startAngle',
  inherits: false,
  interpolable: true,
  syntax: PropertySyntax.ANGLE
}, {
  name: 'endAngle',
  inherits: false,
  interpolable: true,
  syntax: PropertySyntax.ANGLE
}];
SECTOR_CSS_PROPERTY.forEach(function (property) {
  CSS.registerProperty(property);
});
function createShape(type, props) {
  if (!type) return null;
  var ShapeClass = getTag(type);
  if (!ShapeClass) return null;
  // const result = checkCSSRule(type, originStyle);
  var shape = new ShapeClass(props);
  // @ts-ignore
  shape.gesture = addEvent(shape, props);
  return shape;
}
function updateShape(shape, props, lastProps) {
  // @ts-ignore
  var gesture = shape.gesture;
  // 如果 shape 上存在 gesture，说明是 jsx 标签创建的元素，才需要更新事件
  if (gesture) {
    // 先清除上次 props 绑定的事件
    EVENT_LIST.forEach(function (_a) {
      var eventName = _a[0],
        handlerName = _a[1];
      if (!lastProps[handlerName]) return;
      gesture.off(eventName, lastProps[handlerName]);
    });
    // 绑定最新的事件
    EVENT_LIST.forEach(function (_a) {
      var eventName = _a[0],
        handlerName = _a[1];
      if (!props[handlerName]) return;
      gesture.on(eventName, props[handlerName]);
    });
  }
  return shape;
}
function addEvent(shape, props) {
  var gesture = new Gesture(shape);
  EVENT_LIST.forEach(function (_a) {
    var eventName = _a[0],
      handlerName = _a[1];
    if (!props[handlerName]) return;
    gesture.on(eventName, props[handlerName]);
  });
  return gesture;
}
export { createShape, updateShape, addEvent };