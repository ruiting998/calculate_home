import { __extends } from "tslib";
import { Path } from '@antv/g-lite';
import * as Smooth from './util/smooth';
var SmoothPolyline = /** @class */function (_super) {
  __extends(SmoothPolyline, _super);
  function SmoothPolyline(config) {
    var _this = _super.call(this, config) || this;
    _this.updatePath();
    return _this;
  }
  SmoothPolyline.prototype.setAttribute = function (name, value, force) {
    _super.prototype.setAttribute.call(this, name, value, force);
    if (['smooth', 'points'].indexOf(name) > -1) {
      this.updatePath();
    }
  };
  SmoothPolyline.prototype.updatePath = function () {
    var _a = this.parsedStyle,
      smooth = _a.smooth,
      points = _a.points;
    var pos = points.points;
    var d = [['M', pos[0][0], pos[0][1]]];
    if (smooth) {
      var constaint = [[0, 0], [1, 1]];
      var sps = Smooth.smooth(pos.map(function (d) {
        return {
          x: d[0],
          y: d[1]
        };
      }), false, constaint);
      for (var i = 0, n = sps.length; i < n; i++) {
        var sp = sps[i];
        d.push(['C', sp[1], sp[2], sp[3], sp[4], sp[5], sp[6]]);
      }
    } else {
      var i = void 0;
      var l = void 0;
      for (i = 1, l = pos.length - 1; i < l; i++) {
        d.push(['L', pos[i][0], pos[i][1]]);
      }
      d.push(['L', pos[l][0], pos[l][1]]);
    }
    _super.prototype.setAttribute.call(this, 'path', d);
  };
  SmoothPolyline.tag = 'smooth-polyline';
  return SmoothPolyline;
}(Path);
export { SmoothPolyline };