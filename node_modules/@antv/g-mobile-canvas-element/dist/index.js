'use strict';

var EventEmitter = require('eventemitter3');

var CanvasElement = /** @class */ (function () {
    function CanvasElement(ctx) {
        this.isCanvasElement = true;
        this.emitter = new EventEmitter();
        this.context = ctx;
        // 有可能是 node canvas 创建的 context 对象
        var canvas = ctx.canvas || {};
        this.width = canvas.width || 0;
        this.height = canvas.height || 0;
    }
    CanvasElement.prototype.getContext = function (contextId, contextAttributes) {
        return this.context;
    };
    CanvasElement.prototype.getBoundingClientRect = function () {
        var width = this.width;
        var height = this.height;
        // 默认都处理成可视窗口的顶部位置
        return {
            top: 0,
            right: width,
            bottom: height,
            left: 0,
            width: width,
            height: height,
            x: 0,
            y: 0,
        };
    };
    CanvasElement.prototype.addEventListener = function (type, listener, options) {
        // TODO: implement options
        this.emitter.on(type, listener);
    };
    CanvasElement.prototype.removeEventListener = function (type, listener, options) {
        this.emitter.off(type, listener);
    };
    /**
     * @see https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget-dispatchEvent
     */
    CanvasElement.prototype.dispatchEvent = function (e) {
        this.emitter.emit(e.type, e);
        return true;
    };
    return CanvasElement;
}());
function supportEventListener(canvas) {
    if (!canvas) {
        return false;
    }
    // 非 HTMLCanvasElement
    if (canvas.nodeType !== 1 ||
        !canvas.nodeName ||
        canvas.nodeName.toLowerCase() !== 'canvas') {
        return false;
    }
    // 微信小程序canvas.getContext('2d')时也是CanvasRenderingContext2D
    // 也会有ctx.canvas, 而且nodeType也是1，所以还要在看下是否支持addEventListener
    var support = false;
    try {
        canvas.addEventListener('eventTest', function () {
            support = true;
        });
        canvas.dispatchEvent(new Event('eventTest'));
    }
    catch (error) {
        support = false;
    }
    return support;
}
function createMobileCanvasElement(ctx) {
    if (!ctx) {
        return null;
    }
    if (supportEventListener(ctx.canvas)) {
        return ctx.canvas;
    }
    return new CanvasElement(ctx);
}

exports.createMobileCanvasElement = createMobileCanvasElement;
//# sourceMappingURL=index.js.map
