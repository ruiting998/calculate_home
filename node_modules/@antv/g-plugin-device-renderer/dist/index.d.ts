import type { DataURLOptions, GlobalRuntime } from '@antv/g-lite';
import { AbstractRendererPlugin } from '@antv/g-lite';
import { Renderable3D } from './components/Renderable3D';
import { Mesh } from './Mesh';
import type { Texture, TextureDescriptor } from './platform';
import { Batch } from './renderer';
import { RenderGraphPlugin } from './RenderGraphPlugin';
import { TexturePool } from './TexturePool';
import { RendererParameters } from './interfaces';
export * from './geometries';
export * from './interfaces';
export * from './lights';
export * from './materials';
export * from './meshes';
export * from './passes';
export * from './platform';
export * from './render';
export * from './shader/compiler';
export * from './utils';
export { Renderable3D, Batch, TexturePool, RenderGraphPlugin, Mesh };
export declare class Plugin extends AbstractRendererPlugin {
    name: string;
    parameters: RendererParameters;
    init(runtime: GlobalRuntime): void;
    destroy(runtime: GlobalRuntime): void;
    private getRenderGraphPlugin;
    getDevice(): import("./platform").Device;
    loadTexture(src: string | TexImageSource, descriptor?: TextureDescriptor, successCallback?: (t: Texture) => void): Texture;
    toDataURL(options: Partial<DataURLOptions>): Promise<string>;
    setParameters(parameters: Partial<RendererParameters>): void;
}
