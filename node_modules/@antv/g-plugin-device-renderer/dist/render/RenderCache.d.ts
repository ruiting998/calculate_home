import type { Bindings, BindingsDescriptor, Device, InputLayout, InputLayoutDescriptor, Program, ProgramDescriptorSimple, RenderPipeline, RenderPipelineDescriptor, Sampler, SamplerDescriptor, VendorInfo } from '../platform';
interface ProgramDescriptor extends ProgramDescriptorSimple {
    ensurePreprocessed: (vendorInfo: VendorInfo) => void;
}
export declare class RenderCache {
    device: Device;
    private bindingsCache;
    private renderPipelinesCache;
    private inputLayoutsCache;
    private programCache;
    private samplerCache;
    constructor(device: Device);
    createBindings(descriptor: BindingsDescriptor): Bindings;
    createRenderPipeline(descriptor: RenderPipelineDescriptor): RenderPipeline;
    createInputLayout(descriptor: InputLayoutDescriptor): InputLayout;
    createProgramSimple(programDescriptorSimple: ProgramDescriptorSimple): Program;
    createProgram(programDescriptor: ProgramDescriptor): Program;
    createSampler(descriptor: SamplerDescriptor): Sampler;
    destroy(): void;
}
export {};
