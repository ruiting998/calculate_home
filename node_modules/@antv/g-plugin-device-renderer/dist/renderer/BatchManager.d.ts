import type { DisplayObject, RenderingPluginContext, Shape } from '@antv/g-lite';
import type { LightPool } from '../LightPool';
import type { Device } from '../platform';
import type { RenderInstList, RenderHelper } from '../render';
import type { TexturePool } from '../TexturePool';
import type { Batch } from './Batch';
export type BatchContext = {
    device: Device;
} & RenderingPluginContext;
export declare class BatchManager {
    protected renderHelper: RenderHelper;
    private rendererFactory;
    protected texturePool: TexturePool;
    protected lightPool: LightPool;
    constructor(renderHelper: RenderHelper, rendererFactory: Record<Shape, Batch>, texturePool: TexturePool, lightPool: LightPool);
    /**
     * attached when Device created
     */
    private context;
    /**
     * draw calls
     */
    private meshes;
    /**
     * update patches which can be merged before rendering
     */
    private pendingUpdatePatches;
    private stencilRefCache;
    render(list: RenderInstList, isPicking?: boolean): void;
    /**
     * get called in RenderGraphPlugin
     */
    attach(context: BatchContext): void;
    add(object: DisplayObject): void;
    remove(object: DisplayObject): void;
    updateAttribute(object: DisplayObject, attributeName: string, newValue: any, immediately?: boolean): void;
    changeRenderOrder(object: DisplayObject, renderOrder: number): void;
    getStencilRef(object: DisplayObject): number;
    private updatePendingPatches;
}
