import { AABB } from '@antv/g-lite';
import EventEmitter from 'eventemitter3';
import type { Mesh } from '../Mesh';
import type { Buffer, Device, InputLayoutDescriptor, VertexBufferFrequency } from '../platform';
import { BufferFrequencyHint, BufferUsage, Format, PrimitiveTopology } from '../platform';
export declare function makeDataBuffer(device: Device, usage: BufferUsage, data: ArrayBufferLike, hint?: BufferFrequencyHint): Buffer;
export type IndicesArray = number[] | Int32Array | Uint32Array | Uint16Array;
export interface GeometryVertexBufferDescriptor {
    bufferIndex: number;
    byteStride: number;
    frequency: VertexBufferFrequency;
    attributes: {
        format: Format;
        bufferByteOffset: number;
        byteStride?: number;
        location: number;
        divisor?: number;
    }[];
    data: ArrayBufferView;
}
export interface GeometryPatch {
    bufferIndex: number;
    location: number;
    data: ArrayBufferView;
}
export interface VertexBufferToUpdateDescriptor {
    bufferIndex: number;
    bufferByteOffset?: number;
    data: ArrayBufferView;
}
export declare enum GeometryEvent {
    CHANGED = "changed"
}
/**
 * just hold descriptors of buffers & indices, won't use underlying GPU resources
 */
export declare class BufferGeometry<GeometryProps = any> extends EventEmitter {
    device: Device;
    props: Partial<GeometryProps>;
    /**
     * 绘制模式
     */
    drawMode: PrimitiveTopology;
    /**
     * 存放 Attribute Buffer 列表
     */
    vertexBuffers: Buffer[];
    vertices: ArrayBufferView[];
    /**
     * 存放 Index Buffer
     */
    indexBuffer: Buffer;
    /**
     * 索引数组
     */
    indices: IndicesArray;
    inputLayoutDescriptor: InputLayoutDescriptor;
    vertexCount: number;
    instancedCount: number;
    indexStart: number;
    primitiveStart: number;
    dirty: boolean;
    meshes: Mesh[];
    constructor(device: Device, props?: Partial<GeometryProps>);
    validate(mesh: Mesh): boolean;
    build(meshes: Mesh<GeometryProps>[]): void;
    computeBoundingBox(): AABB;
    setIndexBuffer(indices: IndicesArray): this;
    setVertexBuffer(descriptor: GeometryVertexBufferDescriptor): this;
    getVertexBuffer(bufferIndex: number): Buffer;
    updateVertexBuffer(bufferIndex: number, location: number, index: number, data: Uint8Array): void;
    updateIndices(indices: IndicesArray, offset?: number): this;
    destroy(): void;
}
