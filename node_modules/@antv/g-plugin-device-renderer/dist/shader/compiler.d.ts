import type { Device, ProgramDescriptorSimple, VendorInfo } from '../platform';
export type ShaderFeature = 'MRT' | 'PICKING';
export type ShaderFeatureMap = Partial<Record<ShaderFeature, boolean>>;
export declare function getDefines(shader: string): Record<string, number>;
export declare function getAttributeLocations(vert: string, defines: Record<string, number>): {
    location: number;
    name: string;
}[];
export declare function getUniforms(vert: string): string[];
export declare function preprocessShader_GLSL(vendorInfo: VendorInfo, type: 'vert' | 'frag', source: string, defines?: Record<string, string> | null, features?: ShaderFeatureMap | null): string;
export interface ProgramDescriptorSimpleWithOrig extends ProgramDescriptorSimple {
    vert: string;
    frag: string;
}
export declare function preprocessProgram_GLSL(vendorInfo: VendorInfo, vert: string, frag: string, defines?: Record<string, string> | null, features?: ShaderFeatureMap | null): ProgramDescriptorSimpleWithOrig;
export interface ProgramObjBag {
    both?: string;
    vert: string;
    frag: string;
    defines?: Record<string, string>;
    features?: ShaderFeatureMap;
}
export declare function preprocessProgramObj_GLSL(device: Device, obj: ProgramObjBag): ProgramDescriptorSimpleWithOrig;
